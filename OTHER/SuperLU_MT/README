		SuperLU_MT (version 1.0)
		========================

SuperLU_MT contains a set of subroutines to solve a sparse linear system 
A*X=B. It uses Gaussian elimination with partial pivoting (GEPP). 
The columns of A may be preordered before factorization; the 
preordering for sparsity is completely separate from the factorization.

SuperLU_MT is a parallel extension to the serial SuperLU library.
SuperLU_MT is implemented in ANSI C, with multithreading extension,
for example, using POSIX threads. Currently, only the LU factorization 
routine, which is the most time-consuming part of the solution process, 
is parallelized on machines with a shared address space. The other
routines, such as column preordering and the forward and back substitutions
are performed sequentially. This "alpha" release contains only 
double-precision real data type.

The distribution contains the following directory structure:

  SuperLU_MT/README    instructions on installation
  SuperLU_MT/CBLAS/    needed BLAS routines in C, not necessarily fast
  SuperLU_MT/EXAMPLE/  example programs
  SuperLU_MT/INSTALL/  test machine dependent parameters; the Users' Guide.
  SuperLU_MT/SRC/      C source code, to be compiled into superlu_mt.a library
  SuperLU_MT/TESTING/  driver routines to test correctness
  SuperLU_MT/Makefile  top level Makefile that does installation and testing
  SuperLU_MT/make.inc  compiler, compile flags, library definitions and C
                       preprocessor definitions, included in all Makefiles.
                       (You may need to edit it to be suitable for your system
                        before compiling the whole package.)

Before installing the package, please examine the three things dependent 
on your system setup:

1. Edit the make.inc include file.
   This make include file is referenced inside each of the Makefiles
   in the various subdirectories. As a result, there is no need to 
   edit the Makefiles in the subdirectories. All information that is
   machine specific has been defined in this include file. 

   The following machine-specific SuperLU_MT/make.inc files are
   provided in the top-level directory:

	make.inc	Platforms
        --------        ---------
        make.alpha      DEC Alpha Servers
        make.cray       Cray C90/J90
        make.origin     SGI/Cray Origin2000
        make.pthreads   Any machine that supports POSIX threads
        make.sgi        SGI Power Challenge
        make.sun        Sun Ultra Enterprise servers

   When you have selected the machine to which you wish to install SuperLU_MT,
   copy the appropriate sample include file (if one is present) into 
   make.inc. For example, if you wish to run SuperLU_MT on a Sun SMP system,
   you can do

        cp make.sun make.inc
   
   For the systems other than listed above, some porting effort is needed
   for parallel factorization routines. Please refer to the Users' Guide 
   for detailed instructions on porting.
   
2. The BLAS library.
   The parallel routines in SuperLU_MT uses some sequential BLAS routines
   within each process (or thread). If there is BLAS library available on
   your machine, you may define the following in the file make.inc:
        BLASDEF = -DUSE_VENDOR_BLAS
        BLASLIB = <BLAS library you wish to link with>

   The CBLAS/ subdirectory contains the part of the C BLAS needed by 
   SuperLU_MT package. However, these codes are intended for use only if
   there is no faster implementation of the BLAS already available on your
   machine. In this case, you should go to the top-level SuperLU_MT/
   directory and do the following:

    1) In make.inc, undefine (comment out) BLASDEF, and define:
          BLASLIB = ../blas$(PLAT).a

    2) Type:
          make blaslib
       to make the BLAS library from the routines in the CBLAS/ subdirectory.

3. C preprocessor definition CDEFS.
   In the header file SRC/Cnames.h, we use macros to determine how
   C routines should be named so that they are callable by Fortran.
   (Some vendor-supplied BLAS libraries do not have C interface. So the 
    re-naming is needed in order for the SuperLU BLAS calls (in C) to 
    interface with the Fortran-style BLAS.)
   The possible options for CDEFS are:

       o -DAdd_: Fortran expects a C routine to have an underscore
		 postfixed to the name;
       o -DNoChange: Fortran expects a C routine name to be identical to
		     that compiled by C;
       o -DUpCase: Fortran expects a C routine name to be all uppercase.
   
A Makefile is provided in each subdirectory. The installation can be done
completely automatically by simply typing "make" at the top level.


REFERENCES

[1] A Supernodal Approach to Sparse Partial Pivoting,
    James W. Demmel, Stanley C. Eisenstat, John R. Gilbert, Xiaoye S. Li
    and Joseph W.H. Liu,
    SIAM J. on Matrix Anal. and Appl., vol 20(3), 720-755, 1999.

[2] An Asynchronous Parallel Supernodal Algorithm for Sparse Gaussian 
    Elimination, James W. Demmel, John R. Gilbert and Xiaoye S. Li,
    SIAM J. Matrix Anal. Appl., vol. 20(4), 915-952, 1999.

[3] Sparse Gaussian Elimination on High Performance Computers,
    Xiaoye S. Li, Tech report UCB//CSD-96-919, Computer Science Division, 
    U.C. Berkeley, September, 1996, Ph.D dissertation.

Xiaoye S. Li,    Lawrence Berkeley National Lab, xiaoye@nersc.gov
James Demmel,    Univ. of California Berkeley, demmel@cs.berkeley.edu
John R. Gilbert, Xerox Palo Alto Research Center, gilbert@parc.xerox.com

