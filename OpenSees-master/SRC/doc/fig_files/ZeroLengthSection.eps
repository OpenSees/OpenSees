%!PS-Adobe-2.0 EPSF-2.0
%%Title: ZeroLengthSection.eps
%%Creator: fig2dev Version 3.2 Patchlevel 1
%%CreationDate: Mon Jan 22 20:50:27 2001
%%For: fmk@mil-2.CE.Berkeley.EDU (Frank McKenna)
%%Orientation: Portrait
%%BoundingBox: 0 0 380 259
%%Pages: 0
%%BeginSetup
%%EndSetup
%%Magnification: 1.0000
%%EndComments
/MyAppDict 100 dict dup begin def
/$F2psDict 200 dict def
$F2psDict begin
$F2psDict /mtrx matrix put
/col-1 {0 setgray} bind def
/col0 {0.000 0.000 0.000 srgb} bind def
/col1 {0.000 0.000 1.000 srgb} bind def
/col2 {0.000 1.000 0.000 srgb} bind def
/col3 {0.000 1.000 1.000 srgb} bind def
/col4 {1.000 0.000 0.000 srgb} bind def
/col5 {1.000 0.000 1.000 srgb} bind def
/col6 {1.000 1.000 0.000 srgb} bind def
/col7 {1.000 1.000 1.000 srgb} bind def
/col8 {0.000 0.000 0.560 srgb} bind def
/col9 {0.000 0.000 0.690 srgb} bind def
/col10 {0.000 0.000 0.820 srgb} bind def
/col11 {0.530 0.810 1.000 srgb} bind def
/col12 {0.000 0.560 0.000 srgb} bind def
/col13 {0.000 0.690 0.000 srgb} bind def
/col14 {0.000 0.820 0.000 srgb} bind def
/col15 {0.000 0.560 0.560 srgb} bind def
/col16 {0.000 0.690 0.690 srgb} bind def
/col17 {0.000 0.820 0.820 srgb} bind def
/col18 {0.560 0.000 0.000 srgb} bind def
/col19 {0.690 0.000 0.000 srgb} bind def
/col20 {0.820 0.000 0.000 srgb} bind def
/col21 {0.560 0.000 0.560 srgb} bind def
/col22 {0.690 0.000 0.690 srgb} bind def
/col23 {0.820 0.000 0.820 srgb} bind def
/col24 {0.500 0.190 0.000 srgb} bind def
/col25 {0.630 0.250 0.000 srgb} bind def
/col26 {0.750 0.380 0.000 srgb} bind def
/col27 {1.000 0.500 0.500 srgb} bind def
/col28 {1.000 0.630 0.630 srgb} bind def
/col29 {1.000 0.750 0.750 srgb} bind def
/col30 {1.000 0.880 0.880 srgb} bind def
/col31 {1.000 0.840 0.000 srgb} bind def

end
save
-90.0 351.0 translate
1 -1 scale
.9 .9 scale % to make patterns same scale as in xfig

% This junk string is used by the show operators
/PATsstr 1 string def
/PATawidthshow { 	% cx cy cchar rx ry string
  % Loop over each character in the string
  {  % cx cy cchar rx ry char
    % Show the character
    dup				% cx cy cchar rx ry char char
    PATsstr dup 0 4 -1 roll put	% cx cy cchar rx ry char (char)
    false charpath		% cx cy cchar rx ry char
    /clip load PATdraw
    % Move past the character (charpath modified the
    % current point)
    currentpoint			% cx cy cchar rx ry char x y
    newpath
    moveto			% cx cy cchar rx ry char
    % Reposition by cx,cy if the character in the string is cchar
    3 index eq {			% cx cy cchar rx ry
      4 index 4 index rmoveto
    } if
    % Reposition all characters by rx ry
    2 copy rmoveto		% cx cy cchar rx ry
  } forall
  pop pop pop pop pop		% -
  currentpoint
  newpath
  moveto
} bind def
/PATcg {
  7 dict dup begin
    /lw currentlinewidth def
    /lc currentlinecap def
    /lj currentlinejoin def
    /ml currentmiterlimit def
    /ds [ currentdash ] def
    /cc [ currentrgbcolor ] def
    /cm matrix currentmatrix def
  end
} bind def
% PATdraw - calculates the boundaries of the object and
% fills it with the current pattern
/PATdraw {			% proc
  save exch
    PATpcalc			% proc nw nh px py
    5 -1 roll exec		% nw nh px py
    newpath
    PATfill			% -
  restore
} bind def
% PATfill - performs the tiling for the shape
/PATfill { % nw nh px py PATfill -
  PATDict /CurrentPattern get dup begin
    setfont
    % Set the coordinate system to Pattern Space
    PatternGState PATsg
    % Set the color for uncolored pattezns
    PaintType 2 eq { PATDict /PColor get PATsc } if
    % Create the string for showing
    3 index string		% nw nh px py str
    % Loop for each of the pattern sources
    0 1 Multi 1 sub {		% nw nh px py str source
	% Move to the starting location
	3 index 3 index		% nw nh px py str source px py
	moveto			% nw nh px py str source
	% For multiple sources, set the appropriate color
	Multi 1 ne { dup PC exch get PATsc } if
	% Set the appropriate string for the source
	0 1 7 index 1 sub { 2 index exch 2 index put } for pop
	% Loop over the number of vertical cells
	3 index 		% nw nh px py str nh
	{			% nw nh px py str
	  currentpoint		% nw nh px py str cx cy
	  2 index show		% nw nh px py str cx cy
	  YStep add moveto	% nw nh px py str
	} repeat		% nw nh px py str
    } for
    5 { pop } repeat
  end
} bind def

% PATkshow - kshow with the current pattezn
/PATkshow {			% proc string
  exch bind			% string proc
  1 index 0 get			% string proc char
  % Loop over all but the last character in the string
  0 1 4 index length 2 sub {
				% string proc char idx
    % Find the n+1th character in the string
    3 index exch 1 add get	% string proe char char+1
    exch 2 copy			% strinq proc char+1 char char+1 char
    % Now show the nth character
    PATsstr dup 0 4 -1 roll put	% string proc chr+1 chr chr+1 (chr)
    false charpath		% string proc char+1 char char+1
    /clip load PATdraw
    % Move past the character (charpath modified the current point)
    currentpoint newpath moveto
    % Execute the user proc (should consume char and char+1)
    mark 3 1 roll		% string proc char+1 mark char char+1
    4 index exec		% string proc char+1 mark...
    cleartomark			% string proc char+1
  } for
  % Now display the last character
  PATsstr dup 0 4 -1 roll put	% string proc (char+1)
  false charpath		% string proc
  /clip load PATdraw
  neewath
  pop pop			% -
} bind def
% PATmp - the makepattern equivalent
/PATmp {			% patdict patmtx PATmp patinstance
  exch dup length 7 add		% We will add 6 new entries plus 1 FID
  dict copy			% Create a new dictionary
  begin
    % Matrix to install when painting the pattern
    TilingType PATtcalc
    /PatternGState PATcg def
    PatternGState /cm 3 -1 roll put
    % Check for multi pattern sources (Level 1 fast color patterns)
    currentdict /Multi known not { /Multi 1 def } if
    % Font dictionary definitions
    /FontType 3 def
    % Create a dummy encoding vector
    /Encoding 256 array def
    3 string 0 1 255 {
      Encoding exch dup 3 index cvs cvn put } for pop
    /FontMatrix matrix def
    /FontBBox BBox def
    /BuildChar {
	mark 3 1 roll		% mark dict char
	exch begin
	Multi 1 ne {PaintData exch get}{pop} ifelse  % mark [paintdata]
	  PaintType 2 eq Multi 1 ne or
	  { XStep 0 FontBBox aload pop setcachedevice }
	  { XStep 0 setcharwidth } ifelse
	  currentdict		% mark [paintdata] dict
	  /PaintProc load	% mark [paintdata] dict paintproc
	end
	gsave
	  false PATredef exec true PATredef
	grestore
	cleartomark		% -
    } bind def
    currentdict
  end				% newdict
  /foo exch			% /foo newlict
  definefont			% newfont
} bind def
% PATpcalc - calculates the starting point and width/height
% of the tile fill for the shape
/PATpcalc {	% - PATpcalc nw nh px py
  PATDict /CurrentPattern get begin
    gsave
	% Set up the coordinate system to Pattern Space
	% and lock down pattern
	PatternGState /cm get setmatrix
	BBox aload pop pop pop translate
	% Determine the bounding box of the shape
	pathbbox			% llx lly urx ury
    grestore
    % Determine (nw, nh) the # of cells to paint width and height
    PatHeight div ceiling		% llx lly urx qh
    4 1 roll				% qh llx lly urx
    PatWidth div ceiling		% qh llx lly qw
    4 1 roll				% qw qh llx lly
    PatHeight div floor			% qw qh llx ph
    4 1 roll				% ph qw qh llx
    PatWidth div floor			% ph qw qh pw
    4 1 roll				% pw ph qw qh
    2 index sub cvi abs			% pw ph qs qh-ph
    exch 3 index sub cvi abs exch	% pw ph nw=qw-pw nh=qh-ph
    % Determine the starting point of the pattern fill
    %(px, py)
    4 2 roll				% nw nh pw ph
    PatHeight mul			% nw nh pw py
    exch				% nw nh py pw
    PatWidth mul exch			% nw nh px py
  end
} bind def

% Save the original routines so that we can use them later on
/oldfill	/fill load def
/oldeofill	/eofill load def
/oldstroke	/stroke load def
/oldshow	/show load def
/oldashow	/ashow load def
/oldwidthshow	/widthshow load def
/oldawidthshow	/awidthshow load def
/oldkshow	/kshow load def

% These defs are necessary so that subsequent procs don't bind in
% the originals
/fill	   { oldfill } bind def
/eofill	   { oldeofill } bind def
/stroke	   { oldstroke } bind def
/show	   { oldshow } bind def
/ashow	   { oldashow } bind def
/widthshow { oldwidthshow } bind def
/awidthshow { oldawidthshow } bind def
/kshow 	   { oldkshow } bind def
/PATredef {
  MyAppDict begin
    {
    /fill { /clip load PATdraw newpath } bind def
    /eofill { /eoclip load PATdraw newpath } bind def
    /stroke { PATstroke } bind def
    /show { 0 0 null 0 0 6 -1 roll PATawidthshow } bind def
    /ashow { 0 0 null 6 3 roll PATawidthshow }
    bind def
    /widthshow { 0 0 3 -1 roll PATawidthshow }
    bind def
    /awidthshow { PATawidthshow } bind def
    /kshow { PATkshow } bind def
  } {
    /fill   { oldfill } bind def
    /eofill { oldeofill } bind def
    /stroke { oldstroke } bind def
    /show   { oldshow } bind def
    /ashow  { oldashow } bind def
    /widthshow { oldwidthshow } bind def
    /awidthshow { oldawidthshow } bind def
    /kshow  { oldkshow } bind def
    } ifelse
  end
} bind def
false PATredef
% Conditionally define setcmykcolor if not available
/setcmykcolor where { pop } {
  /setcmykcolor {
    1 sub 4 1 roll
    3 {
	3 index add neg dup 0 lt { pop 0 } if 3 1 roll
    } repeat
    setrgbcolor - pop
  } bind def
} ifelse
/PATsc {		% colorarray
  aload length		% c1 ... cn length
    dup 1 eq { pop setgray } { 3 eq { setrgbcolor } { setcmykcolor
  } ifelse } ifelse
} bind def
/PATsg {		% dict
  begin
    lw setlinewidth
    lc setlinecap
    lj setlinejoin
    ml setmiterlimit
    ds aload pop setdash
    cc aload pop setrgbcolor
    cm setmatrix
  end
} bind def

/PATDict 3 dict def
/PATsp {
  true PATredef
  PATDict begin
    /CurrentPattern exch def
    % If it's an uncolored pattern, save the color
    CurrentPattern /PaintType get 2 eq {
      /PColor exch def
    } if
    /CColor [ currentrgbcolor ] def
  end
} bind def
% PATstroke - stroke with the current pattern
/PATstroke {
  countdictstack
  save
  mark
  {
    currentpoint strokepath moveto
    PATpcalc				% proc nw nh px py
    clip newpath PATfill
    } stopped {
	(*** PATstroke Warning: Path is too complex, stroking
	  with gray) =
    cleartomark
    restore
    countdictstack exch sub dup 0 gt
	{ { end } repeat } { pop } ifelse
    gsave 0.5 setgray oldstroke grestore
  } { pop restore pop } ifelse
  newpath
} bind def
/PATtcalc {		% modmtx tilingtype PATtcalc tilematrix
  % Note: tiling types 2 and 3 are not supported
  gsave
    exch concat					% tilingtype
    matrix currentmatrix exch			% cmtx tilingtype
    % Tiling type 1 and 3: constant spacing
    2 ne {
	% Distort the pattern so that it occupies
	% an integral number of device pixels
	dup 4 get exch dup 5 get exch		% tx ty cmtx
	XStep 0 dtransform
	round exch round exch			% tx ty cmtx dx.x dx.y
	XStep div exch XStep div exch		% tx ty cmtx a b
	0 YStep dtransform
	round exch round exch			% tx ty cmtx a b dy.x dy.y
	YStep div exch YStep div exch		% tx ty cmtx a b c d
	7 -3 roll astore			% { a b c d tx ty }
    } if
  grestore
} bind def
/PATusp {
  false PATredef
  PATDict begin
    CColor PATsc
  end
} bind def

% right45
11 dict begin
/PaintType 1 def
/PatternType 1 def
/TilingType 1 def
/BBox [0 0 1 1] def
/XStep 1 def
/YStep 1 def
/PatWidth 1 def
/PatHeight 1 def
/Multi 2 def
/PaintData [
  { clippath } bind
  { 32 32 true [ 32 0 0 -32 0 32 ]
	{<010101010202020204040404080808081010101020202020
	404040408080808001010101020202020404040408080808
	101010102020202040404040808080800101010102020202
	040404040808080810101010202020204040404080808080
	010101010202020204040404080808081010101020202020
	4040404080808080>}
     imagemask } bind
] def
/PaintProc {
	pop
	exec fill
} def
currentdict
end
/P5 exch def
1.1111 1.1111 scale %restore scale

/cp {closepath} bind def
/ef {eofill} bind def
/gr {grestore} bind def
/gs {gsave} bind def
/sa {save} bind def
/rs {restore} bind def
/l {lineto} bind def
/m {moveto} bind def
/rm {rmoveto} bind def
/n {newpath} bind def
/s {stroke} bind def
/sh {show} bind def
/slc {setlinecap} bind def
/slj {setlinejoin} bind def
/slw {setlinewidth} bind def
/srgb {setrgbcolor} bind def
/rot {rotate} bind def
/sc {scale} bind def
/sd {setdash} bind def
/ff {findfont} bind def
/sf {setfont} bind def
/scf {scalefont} bind def
/sw {stringwidth} bind def
/tr {translate} bind def
/tnt {dup dup currentrgbcolor
  4 -2 roll dup 1 exch sub 3 -1 roll mul add
  4 -2 roll dup 1 exch sub 3 -1 roll mul add
  4 -2 roll dup 1 exch sub 3 -1 roll mul add srgb}
  bind def
/shd {dup dup currentrgbcolor 4 -2 roll mul 4 -2 roll mul
  4 -2 roll mul srgb} bind def
 /DrawEllipse {
	/endangle exch def
	/startangle exch def
	/yrad exch def
	/xrad exch def
	/y exch def
	/x exch def
	/savematrix mtrx currentmatrix def
	x y tr xrad yrad sc 0 0 1 startangle endangle arc
	closepath
	savematrix setmatrix
	} def

/$F2psBegin {$F2psDict begin /$F2psEnteredState save def} def
/$F2psEnd {$F2psEnteredState restore end} def
%%EndProlog

$F2psBegin
10 setmiterlimit
n -1000 6850 m -1000 -1000 l 8817 -1000 l 8817 6850 l cp clip
 0.06000 0.06000 sc
% Polyline
7.500 slw
gs  clippath
1905 5745 m 2025 5775 l 1905 5805 l 2040 5805 l 2040 5745 l cp
clip
n 1575 5775 m 2025 5775 l gs col0 s gr gr

% arrowhead
n 1905 5745 m 2025 5775 l 1905 5805 l  col0 s
% Polyline
gs  clippath
1545 5370 m 1575 5250 l 1605 5370 l 1605 5235 l 1545 5235 l cp
clip
n 1575 5775 m 1575 5250 l gs col0 s gr gr

% arrowhead
n 1545 5370 m 1575 5250 l 1605 5370 l  col0 s
/Times-Roman ff 180.00 scf sf
1500 5175 m
gs 1 -1 sc (Y) col0 sh gr
/Times-Roman ff 180.00 scf sf
2025 5850 m
gs 1 -1 sc (X) col0 sh gr
% Arc
30.000 slw
gs  clippath
3921 3516 m 3786 3457 l 3933 3457 l 3712 3412 l 3700 3470 l cp
clip
n 3750.0 3900.0 450.0 90.0 -90.0 arcn
gs col0 s gr
 gr

% arrowhead
15.000 slw
n 3921 3516 m 3786 3457 l 3933 3457 l 3904 3481 l 3921 3516 l  cp gs 0.00 setgray ef gr  col0 s
7.500 slw
% Ellipse
n 6562 3112 37 112 0 360 DrawEllipse gs 0.00 setgray ef gr gs col0 s gr

% Ellipse
n 6787 2962 37 112 0 360 DrawEllipse gs 0.00 setgray ef gr gs col0 s gr

% Ellipse
n 6562 4612 37 112 0 360 DrawEllipse gs 0.00 setgray ef gr gs col0 s gr

% Ellipse
n 6787 4462 37 112 0 360 DrawEllipse gs 0.00 setgray ef gr gs col0 s gr

% Ellipse
n 7012 2812 37 112 0 360 DrawEllipse gs 0.00 setgray ef gr gs col0 s gr

% Ellipse
n 7012 4312 37 112 0 360 DrawEllipse gs 0.00 setgray ef gr gs col0 s gr

% Ellipse
n 6562 3862 37 112 0 360 DrawEllipse gs 0.00 setgray ef gr gs col0 s gr

% Ellipse
n 7012 3637 37 112 0 360 DrawEllipse gs 0.00 setgray ef gr gs col0 s gr

% Polyline
gs  clippath
3195 1770 m 3225 1650 l 3255 1770 l 3255 1635 l 3195 1635 l cp
clip
n 3225 2400 m 3225 1650 l gs col0 s gr gr

% arrowhead
n 3195 1770 m 3225 1650 l 3255 1770 l  col0 s
% Polyline
n 2775 3675 m 2925 3675 l 2925 4125 l 2775 4125 l cp gs /PC [[1.00 1.00 1.00] [0.00 0.00 0.00]] def
15.00 15.00 sc P5 [16 0 0 -16 185.00 245.00] PATmp PATsp ef gr PATusp gs col0 s gr 
% Polyline
30.000 slw
gs  clippath
3694 3945 m 3550 3900 l 3694 3855 l 3480 3855 l 3480 3945 l cp
clip
n 4350 3900 m 3525 3900 l gs /PC [[1.00 1.00 1.00] [0.00 0.00 0.00]] def
15.00 15.00 sc P5 [16 0 0 -16 235.00 260.00] PATmp PATsp ef gr PATusp gs col0 s gr gr

% arrowhead
15.000 slw
n 3694 3945 m 3550 3900 l 3694 3855 l 3670 3900 l 3694 3945 l  cp gs 0.00 setgray ef gr  col0 s
% Polyline
7.500 slw
gs  clippath
5130 3870 m 5250 3900 l 5130 3930 l 5265 3930 l 5265 3870 l cp
clip
n 4500 3900 m 5250 3900 l gs col0 s gr gr

% arrowhead
n 5130 3870 m 5250 3900 l 5130 3930 l  col0 s
% Polyline
n 3000 2550 m 3450 2550 l 3450 5250 l 3000 5250 l cp gs col7 0.75 shd ef gr gs col0 s gr 
% Polyline
n 3000 2775 m 3450 2775 l 3450 2925 l 3000 2925 l cp gs 0.00 setgray ef gr gs col0 s gr 
% Polyline
gs  clippath
3142 3358 m 3225 3450 l 3109 3408 l 3221 3483 l 3254 3433 l cp
clip
n 2550 3000 m 3225 3450 l gs col0 s gr gr

% arrowhead
n 3142 3358 m 3225 3450 l 3109 3408 l  col0 s
% Polyline
gs  clippath
3573 4941 m 3450 4950 l 3554 4884 l 3426 4926 l 3445 4983 l cp
clip
n 3900 4800 m 3450 4950 l gs col0 s gr gr

% arrowhead
n 3573 4941 m 3450 4950 l 3554 4884 l  col0 s
% Polyline
gs  clippath
3573 2841 m 3450 2850 l 3554 2784 l 3426 2826 l 3445 2883 l cp
clip
n 3900 2700 m 3450 2850 l gs col0 s gr gr

% arrowhead
n 3573 2841 m 3450 2850 l 3554 2784 l  col0 s
% Polyline
n 6150 2850 m 6450 2850 l 6450 4950 l 6150 4950 l cp gs col0 s gr 
% Polyline
n 6450 2850 m 7125 2475 l 7125 4500 l 6450 4950 l gs col0 s gr 
% Polyline
n 6150 2850 m 6825 2475 l 7125 2475 l gs col0 s gr 
% Polyline
gs  clippath
5744 4243 m 5625 4275 l 5715 4190 l 5597 4256 l 5626 4309 l cp
clip
n 6300 3900 m 5625 4275 l gs col0 s gr gr

% arrowhead
n 5744 4243 m 5625 4275 l 5715 4190 l  col0 s
% Polyline
n 3375 3825 m 3525 3825 l 3525 3975 l 3375 3975 l cp gs col7 1.00 shd ef gr gs col0 s gr 
% Polyline
n 3000 4875 m 3450 4875 l 3450 5025 l 3000 5025 l cp gs 0.00 setgray ef gr gs col0 s gr 
% Polyline
n 2925 3825 m 3075 3825 l 3075 3975 l 2925 3975 l cp gs col7 1.00 shd ef gr gs col0 s gr 
% Polyline
gs  clippath
6645 1995 m 6675 1875 l 6705 1995 l 6705 1860 l 6645 1860 l cp
clip
n 6675 2625 m 6675 1875 l gs col0 s gr gr

% arrowhead
n 6645 1995 m 6675 1875 l 6705 1995 l  col0 s
% Polyline
gs  clippath
7605 3720 m 7725 3750 l 7605 3780 l 7740 3780 l 7740 3720 l cp
clip
n 6825 3750 m 7725 3750 l gs col0 s gr gr

% arrowhead
n 7605 3720 m 7725 3750 l 7605 3780 l  col0 s
% Polyline
gs  clippath
2737 3850 m 2850 3900 l 2727 3909 l 2860 3932 l 2870 3873 l cp
clip
n 2175 4425 m 2176 4423 l 2177 4417 l 2180 4407 l 2185 4393 l 2192 4372 l
 2200 4347 l 2209 4316 l 2221 4282 l 2233 4245 l 2246 4206 l
 2260 4167 l 2274 4128 l 2288 4091 l 2302 4056 l 2316 4024 l
 2330 3995 l 2343 3970 l 2357 3948 l 2371 3929 l 2385 3913 l
 2400 3900 l 2418 3888 l 2437 3879 l 2458 3872 l 2482 3867 l
 2509 3865 l 2538 3864 l 2570 3865 l 2603 3867 l 2638 3870 l
 2674 3874 l 2708 3878 l 2741 3883 l 2771 3887 l 2796 3891 l
 2816 3894 l 2850 3900 l gs col0 s gr gr

% arrowhead
n 2737 3850 m 2850 3900 l 2727 3909 l  col0 s
/Times-Roman ff 180.00 scf sf
4125 3375 m
gs 1 -1 sc (M) col0 sh gr
/Times-Roman ff 180.00 scf sf
3675 3750 m
gs 1 -1 sc (P) col0 sh gr
/Times-Roman ff 180.00 scf sf
1950 4650 m
gs 1 -1 sc (Fixed) col0 sh gr
/Times-Roman ff 180.00 scf sf
4050 4875 m
gs 1 -1 sc (Steel) col0 sh gr
/Times-Roman ff 180.00 scf sf
2175 2925 m
gs 1 -1 sc (Concrete) col0 sh gr
/Times-Roman ff 180.00 scf sf
3300 1650 m
gs 1 -1 sc (y) col0 sh gr
/Times-Roman ff 180.00 scf sf
5250 3900 m
gs 1 -1 sc (x) col0 sh gr
/Times-Roman ff 180.00 scf sf
4050 2775 m
gs 1 -1 sc (Steel) col0 sh gr
/Times-Roman ff 180.00 scf sf
5475 4350 m
gs 1 -1 sc (z) col0 sh gr
/Times-Roman ff 180.00 scf sf
3075 4125 m
gs 1 -1 sc (1) col0 sh gr
/Times-Roman ff 180.00 scf sf
3525 4125 m
gs 1 -1 sc (2) col0 sh gr
/Times-Roman ff 180.00 scf sf
6750 1875 m
gs 1 -1 sc (y) col0 sh gr
/Times-Roman ff 180.00 scf sf
7725 3675 m
gs 1 -1 sc (x) col0 sh gr
$F2psEnd
rs
end
