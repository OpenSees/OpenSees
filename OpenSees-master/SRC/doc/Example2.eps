%!PS-Adobe-2.0 EPSF-2.0
%%Title: Example2.fig
%%Creator: fig2dev Version 3.1 Patchlevel 1
%%CreationDate: Mon May 17 10:34:05 1999
%%For: fmckenna@dec-6.CE.Berkeley.EDU (Francis McKenna)
%%Orientation: Portrait
%%BoundingBox: 0 0 314 163
%%Pages: 0
%%BeginSetup
%%IncludeFeature: *PageSize Letter
%%EndSetup
%%EndComments
/$F2psDict 200 dict def
$F2psDict begin
$F2psDict /mtrx matrix put
/col-1 {} def
/col0 {0.000 0.000 0.000 srgb} bind def
/col1 {0.000 0.000 1.000 srgb} bind def
/col2 {0.000 1.000 0.000 srgb} bind def
/col3 {0.000 1.000 1.000 srgb} bind def
/col4 {1.000 0.000 0.000 srgb} bind def
/col5 {1.000 0.000 1.000 srgb} bind def
/col6 {1.000 1.000 0.000 srgb} bind def
/col7 {1.000 1.000 1.000 srgb} bind def
/col8 {0.000 0.000 0.560 srgb} bind def
/col9 {0.000 0.000 0.690 srgb} bind def
/col10 {0.000 0.000 0.820 srgb} bind def
/col11 {0.530 0.810 1.000 srgb} bind def
/col12 {0.000 0.560 0.000 srgb} bind def
/col13 {0.000 0.690 0.000 srgb} bind def
/col14 {0.000 0.820 0.000 srgb} bind def
/col15 {0.000 0.560 0.560 srgb} bind def
/col16 {0.000 0.690 0.690 srgb} bind def
/col17 {0.000 0.820 0.820 srgb} bind def
/col18 {0.560 0.000 0.000 srgb} bind def
/col19 {0.690 0.000 0.000 srgb} bind def
/col20 {0.820 0.000 0.000 srgb} bind def
/col21 {0.560 0.000 0.560 srgb} bind def
/col22 {0.690 0.000 0.690 srgb} bind def
/col23 {0.820 0.000 0.820 srgb} bind def
/col24 {0.500 0.190 0.000 srgb} bind def
/col25 {0.630 0.250 0.000 srgb} bind def
/col26 {0.750 0.380 0.000 srgb} bind def
/col27 {1.000 0.500 0.500 srgb} bind def
/col28 {1.000 0.630 0.630 srgb} bind def
/col29 {1.000 0.750 0.750 srgb} bind def
/col30 {1.000 0.880 0.880 srgb} bind def
/col31 {1.000 0.840 0.000 srgb} bind def

end
save
-26.0 190.0 translate
1 -1 scale
.9 .9 scale % to make patterns same scale as in xfig

% This junk string is used by the show operators
/PATsstr 1 string def
/PATawidthshow { 	% cx cy cchar rx ry string
  % Loop over each character in the string
  {  % cx cy cchar rx ry char
    % Show the character
    dup				% cx cy cchar rx ry char char
    PATsstr dup 0 4 -1 roll put	% cx cy cchar rx ry char (char)
    false charpath		% cx cy cchar rx ry char
    /clip load PATdraw
    % Move past the character (charpath modified the
    % current point)
    currentpoint			% cx cy cchar rx ry char x y
    newpath
    moveto			% cx cy cchar rx ry char
    % Reposition by cx,cy if the character in the string is cchar
    3 index eq {			% cx cy cchar rx ry
      4 index 4 index rmoveto
    } if
    % Reposition all characters by rx ry
    2 copy rmoveto		% cx cy cchar rx ry
  } forall
  pop pop pop pop pop		% -
  currentpoint
  newpath
  moveto
} bind def
/PATcg {
  7 dict dup begin
    /lw currentlinewidth def
    /lc currentlinecap def
    /lj currentlinejoin def
    /ml currentmiterlimit def
    /ds [ currentdash ] def
    /cc [ currentrgbcolor ] def
    /cm matrix currentmatrix def
  end
} bind def
% PATdraw - calculates the boundaries of the object and
% fills it with the current pattern
/PATdraw {			% proc
  save exch
    PATpcalc			% proc nw nh px py
    5 -1 roll exec		% nw nh px py
    newpath
    PATfill			% -
  restore
} bind def
% PATfill - performs the tiling for the shape
/PATfill { % nw nh px py PATfill -
  PATDict /CurrentPattern get dup begin
    setfont
    % Set the coordinate system to Pattern Space
    PatternGState PATsg
    % Set the color for uncolored pattezns
    PaintType 2 eq { PATDict /PColor get PATsc } if
    % Create the string for showing
    3 index string		% nw nh px py str
    % Loop for each of the pattern sources
    0 1 Multi 1 sub {		% nw nh px py str source
	% Move to the starting location
	3 index 3 index		% nw nh px py str source px py
	moveto			% nw nh px py str source
	% For multiple sources, set the appropriate color
	Multi 1 ne { dup PC exch get PATsc } if
	% Set the appropriate string for the source
	0 1 7 index 1 sub { 2 index exch 2 index put } for pop
	% Loop over the number of vertical cells
	3 index 		% nw nh px py str nh
	{			% nw nh px py str
	  currentpoint		% nw nh px py str cx cy
	  2 index show		% nw nh px py str cx cy
	  YStep add moveto	% nw nh px py str
	} repeat		% nw nh px py str
    } for
    5 { pop } repeat
  end
} bind def

% PATkshow - kshow with the current pattezn
/PATkshow {			% proc string
  exch bind			% string proc
  1 index 0 get			% string proc char
  % Loop over all but the last character in the string
  0 1 4 index length 2 sub {
				% string proc char idx
    % Find the n+1th character in the string
    3 index exch 1 add get	% string proe char char+1
    exch 2 copy			% strinq proc char+1 char char+1 char
    % Now show the nth character
    PATsstr dup 0 4 -1 roll put	% string proc chr+1 chr chr+1 (chr)
    false charpath		% string proc char+1 char char+1
    /clip load PATdraw
    % Move past the character (charpath modified the current point)
    currentpoint newpath moveto
    % Execute the user proc (should consume char and char+1)
    mark 3 1 roll		% string proc char+1 mark char char+1
    4 index exec		% string proc char+1 mark...
    cleartomark			% string proc char+1
  } for
  % Now display the last character
  PATsstr dup 0 4 -1 roll put	% string proc (char+1)
  false charpath		% string proc
  /clip load PATdraw
  neewath
  pop pop			% -
} bind def
% PATmp - the makepattern equivalent
/PATmp {			% patdict patmtx PATmp patinstance
  exch dup length 7 add		% We will add 6 new entries plus 1 FID
  dict copy			% Create a new dictionary
  begin
    % Matrix to install when painting the pattern
    TilingType PATtcalc
    /PatternGState PATcg def
    PatternGState /cm 3 -1 roll put
    % Check for multi pattern sources (Level 1 fast color patterns)
    currentdict /Multi known not { /Multi 1 def } if
    % Font dictionary definitions
    /FontType 3 def
    % Create a dummy encoding vector
    /Encoding 256 array def
    3 string 0 1 255 {
      Encoding exch dup 3 index cvs cvn put } for pop
    /FontMatrix matrix def
    /FontBBox BBox def
    /BuildChar {
	mark 3 1 roll		% mark dict char
	exch begin
	Multi 1 ne {PaintData exch get}{pop} ifelse  % mark [paintdata]
	  PaintType 2 eq Multi 1 ne or
	  { XStep 0 FontBBox aload pop setcachedevice }
	  { XStep 0 setcharwidth } ifelse
	  currentdict		% mark [paintdata] dict
	  /PaintProc load	% mark [paintdata] dict paintproc
	end
	gsave
	  false PATredef exec true PATredef
	grestore
	cleartomark		% -
    } bind def
    currentdict
  end				% newdict
  /foo exch			% /foo newlict
  definefont			% newfont
} bind def
% PATpcalc - calculates the starting point and width/height
% of the tile fill for the shape
/PATpcalc {	% - PATpcalc nw nh px py
  PATDict /CurrentPattern get begin
    gsave
	% Set up the coordinate system to Pattern Space
	% and lock down pattern
	PatternGState /cm get setmatrix
	BBox aload pop pop pop translate
	% Determine the bounding box of the shape
	pathbbox			% llx lly urx ury
    grestore
    % Determine (nw, nh) the # of cells to paint width and height
    PatHeight div ceiling		% llx lly urx qh
    4 1 roll				% qh llx lly urx
    PatWidth div ceiling		% qh llx lly qw
    4 1 roll				% qw qh llx lly
    PatHeight div floor			% qw qh llx ph
    4 1 roll				% ph qw qh llx
    PatWidth div floor			% ph qw qh pw
    4 1 roll				% pw ph qw qh
    2 index sub cvi abs			% pw ph qs qh-ph
    exch 3 index sub cvi abs exch	% pw ph nw=qw-pw nh=qh-ph
    % Determine the starting point of the pattern fill
    %(px, py)
    4 2 roll				% nw nh pw ph
    PatHeight mul			% nw nh pw py
    exch				% nw nh py pw
    PatWidth mul exch			% nw nh px py
  end
} bind def

% Save the original routines so that we can use them later on
/oldfill	/fill load def
/oldeofill	/eofill load def
/oldstroke	/stroke load def
/oldshow	/show load def
/oldashow	/ashow load def
/oldwidthshow	/widthshow load def
/oldawidthshow	/awidthshow load def
/oldkshow	/kshow load def

% These defs are necessary so that subsequent procs don't bind in
% the originals
/fill	   { oldfill } bind def
/eofill	   { oldeofill } bind def
/stroke	   { oldstroke } bind def
/show	   { oldshow } bind def
/ashow	   { oldashow } bind def
/widthshow { oldwidthshow } bind def
/awidthshow { oldawidthshow } bind def
/kshow 	   { oldkshow } bind def
/PATredef {
  userdict begin
    {
    /fill { /clip load PATdraw newpath } bind def
    /eofill { /eoclip load PATdraw newpath } bind def
    /stroke { PATstroke } bind def
    /show { 0 0 null 0 0 6 -1 roll PATawidthshow } bind def
    /ashow { 0 0 null 6 3 roll PATawidthshow }
    bind def
    /widthshow { 0 0 3 -1 roll PATawidthshow }
    bind def
    /awidthshow { PATawidthshow } bind def
    /kshow { PATkshow } bind def
  } {
    /fill   { oldfill } bind def
    /eofill { oldeofill } bind def
    /stroke { oldstroke } bind def
    /show   { oldshow } bind def
    /ashow  { oldashow } bind def
    /widthshow { oldwidthshow } bind def
    /awidthshow { oldawidthshow } bind def
    /kshow  { oldkshow } bind def
    } ifelse
  end
} bind def
false PATredef
% Conditionally define setcmykcolor if not available
/setcmykcolor where { pop } {
  /setcmykcolor {
    1 sub 4 1 roll
    3 {
	3 index add neg dup 0 lt { pop 0 } if 3 1 roll
    } repeat
    setrgbcolor - pop
  } bind def
} ifelse
/PATsc {		% colorarray
  aload length		% c1 ... cn length
    dup 1 eq { pop setgray } { 3 eq { setrgbcolor } { setcmykcolor
  } ifelse } ifelse
} bind def
/PATsg {		% dict
  begin
    lw setlinewidth
    lc setlinecap
    lj setlinejoin
    ml setmiterlimit
    ds aload pop setdash
    cc aload pop setrgbcolor
    cm setmatrix
  end
} bind def

/PATDict 3 dict def
/PATsp {
  true PATredef
  PATDict begin
    /CurrentPattern exch def
    % If it's an uncolored pattern, save the color
    CurrentPattern /PaintType get 2 eq {
      /PColor exch def
    } if
    /CColor [ currentrgbcolor ] def
  end
} bind def
% PATstroke - stroke with the current pattern
/PATstroke {
  countdictstack
  save
  mark
  {
    currentpoint strokepath moveto
    PATpcalc				% proc nw nh px py
    clip newpath PATfill
    } stopped {
	(*** PATstroke Warning: Path is too complex, stroking
	  with gray) =
    cleartomark
    restore
    countdictstack exch sub dup 0 gt
	{ { end } repeat } { pop } ifelse
    gsave 0.5 setgray oldstroke grestore
  } { pop restore pop } ifelse
  newpath
} bind def
/PATtcalc {		% modmtx tilingtype PATtcalc tilematrix
  % Note: tiling types 2 and 3 are not supported
  gsave
    exch concat					% tilingtype
    matrix currentmatrix exch			% cmtx tilingtype
    % Tiling type 1 and 3: constant spacing
    2 ne {
	% Distort the pattern so that it occupies
	% an integral number of device pixels
	dup 4 get exch dup 5 get exch		% tx ty cmtx
	XStep 0 dtransform
	round exch round exch			% tx ty cmtx dx.x dx.y
	XStep div exch XStep div exch		% tx ty cmtx a b
	0 YStep dtransform
	round exch round exch			% tx ty cmtx a b dy.x dy.y
	YStep div exch YStep div exch		% tx ty cmtx a b c d
	7 -3 roll astore			% { a b c d tx ty }
    } if
  grestore
} bind def
/PATusp {
  false PATredef
  PATDict begin
    CColor PATsc
  end
} bind def

% vertical sawtooth lines
11 dict begin
/PaintType 1 def
/PatternType 1 def
/TilingType 1 def
/BBox [0 0 1 1] def
/XStep 1 def
/YStep 1 def
/PatWidth 1 def
/PatHeight 1 def
/Multi 2 def
/PaintData [
  { clippath } bind
  { 16 32 true [ 16 0 0 -32 0 32 ]
	{<400020001000080004000200010000800100020004000800
	100020004000800040002000100008000400020001000080
	01000200040008001000200040008000>}
     imagemask } bind
] def
/PaintProc {
	pop
	exec fill
} def
currentdict
end
/P22 exch def
1.1111 1.1111 scale %restore scale

/clp {closepath} bind def
/ef {eofill} bind def
/gr {grestore} bind def
/gs {gsave} bind def
/l {lineto} bind def
/m {moveto} bind def
/n {newpath} bind def
/s {stroke} bind def
/slc {setlinecap} bind def
/slj {setlinejoin} bind def
/slw {setlinewidth} bind def
/srgb {setrgbcolor} bind def
/rot {rotate} bind def
/sc {scale} bind def
/tr {translate} bind def
/tnt {dup dup currentrgbcolor
  4 -2 roll dup 1 exch sub 3 -1 roll mul add
  4 -2 roll dup 1 exch sub 3 -1 roll mul add
  4 -2 roll dup 1 exch sub 3 -1 roll mul add srgb}
  bind def
/shd {dup dup currentrgbcolor 4 -2 roll mul 4 -2 roll mul
  4 -2 roll mul srgb} bind def
 /DrawSplineSection {
	/y3 exch def
	/x3 exch def
	/y2 exch def
	/x2 exch def
	/y1 exch def
	/x1 exch def
	/xa x1 x2 x1 sub 0.666667 mul add def
	/ya y1 y2 y1 sub 0.666667 mul add def
	/xb x3 x2 x3 sub 0.666667 mul add def
	/yb y3 y2 y3 sub 0.666667 mul add def
	x1 y1 lineto
	xa ya xb yb x3 y3 curveto
	} def

/$F2psBegin {$F2psDict begin /$F2psEnteredState save def} def
/$F2psEnd {$F2psEnteredState restore end} def
%%EndProlog

$F2psBegin
10 setmiterlimit
 0.06000 0.06000 sc
7.500 slw
% Polyline
n 1051 2701 m 1201 2476 l  1351 2701 l  gs col-1 s gr 
% Polyline
n 901 2701 m 1576 2701 l  gs col-1 s gr 
% Polyline
n 2851 2701 m 3001 2476 l  3151 2701 l  gs col-1 s gr 
% Polyline
n 2701 2701 m 3376 2701 l  gs col-1 s gr 
% Polyline
n 3376 2701 m 3526 2476 l  3676 2701 l  gs col-1 s gr 
% Polyline
n 3226 2701 m 3901 2701 l  gs col-1 s gr 
/Times-Roman findfont 150.00 scalefont setfont
4351 1126 m
gs 1 -1 sc (1) col-1 show gr
/Times-Roman findfont 180.00 scalefont setfont
4201 1051 m
gs 1 -1 sc (A  = 10) col-1 show gr
/Times-Roman findfont 180.00 scalefont setfont
4801 1351 m
gs 1 -1 sc (in) col-1 show gr
/Times-Roman findfont 180.00 scalefont setfont
4801 1051 m
gs 1 -1 sc (in) col-1 show gr
/Times-Roman findfont 150.00 scalefont setfont
4351 1426 m
gs 1 -1 sc (2,3) col-1 show gr
/Times-Roman findfont 150.00 scalefont setfont
4951 1276 m
gs 1 -1 sc (2) col-1 show gr
/Times-Roman findfont 180.00 scalefont setfont
4201 1351 m
gs 1 -1 sc (A    = 5) col-1 show gr
/Times-Roman findfont 150.00 scalefont setfont
4951 976 m
gs 1 -1 sc (2) col-1 show gr
/Symbol findfont 180.00 scalefont setfont
5476 1801 m
gs 1 -1 sc (e) col-1 show gr
/Times-Roman findfont 150.00 scalefont setfont
5551 1876 m
gs 1 -1 sc (y) col-1 show gr
/Symbol findfont 180.00 scalefont setfont
4952 2327 m
gs 1 -1 sc (e) col-1 show gr
/Times-Roman findfont 150.00 scalefont setfont
5027 2402 m
gs 1 -1 sc (y) col-1 show gr
15.000 slw
% Polyline
n 1200 2400 m 2100 1200 l  3000 2400 l  gs col-1 s gr 
% Polyline
n 2100 1200 m 3525 2400 l  gs col-1 s gr 
7.500 slw
% Polyline
n 2025 1125 m 2175 1125 l  2175 1275 l  2025 1275 l  clp gs /PC [[0.00 0.00 0.00] [0.00 0.00 0.00]] def
15.00 15.00 sc P22 [8 0 0 -16 135.00 75.00]  PATmp PATsp ef gr PATusp  gs col-1 s gr 
% Polyline
n 1125 2325 m 1275 2325 l  1275 2475 l  1125 2475 l  clp gs /PC [[0.00 0.00 0.00] [0.00 0.00 0.00]] def
15.00 15.00 sc P22 [8 0 0 -16 75.00 155.00]  PATmp PATsp ef gr PATusp  gs col-1 s gr 
% Polyline
n 2925 2325 m 3075 2325 l  3075 2475 l  2925 2475 l  clp gs /PC [[0.00 0.00 0.00] [0.00 0.00 0.00]] def
15.00 15.00 sc P22 [8 0 0 -16 195.00 155.00]  PATmp PATsp ef gr PATusp  gs col-1 s gr 
% Polyline
n 3450 2325 m 3600 2325 l  3600 2475 l  3450 2475 l  clp gs /PC [[0.00 0.00 0.00] [0.00 0.00 0.00]] def
15.00 15.00 sc P22 [8 0 0 -16 230.00 155.00]  PATmp PATsp ef gr PATusp  gs col-1 s gr 
15.000 slw
% Polyline
n 2325 1200 m 3000 1200 l  gs col-1 s gr 
% Polyline
n 2100 600 m 2100 900 l  gs col-1 s gr 
% Polyline
n 2025 750 m 2100 900 l  2175 750 l  gs col-1 s gr 
% Polyline
n 2850 1125 m 3000 1200 l  2850 1275 l  gs col-1 s gr 
7.500 slw
% Polyline
n 1200 2850 m 1200 3150 l  gs col-1 s gr 
% Polyline
n 1200 3000 m 3525 3000 l  gs col-1 s gr 
% Polyline
n 3000 2850 m 3000 3150 l  gs col-1 s gr 
% Polyline
n 3525 2850 m 3525 3150 l  gs col-1 s gr 
% Polyline
n 450 1200 m 750 1200 l  gs col-1 s gr 
% Polyline
n 600 1200 m 600 2400 l  gs col-1 s gr 
% Polyline
n 450 2400 m 750 2400 l  gs col-1 s gr 
% Polyline
n 2100 2850 m 2100 3150 l  gs col-1 s gr 
% Polyline
n 4727 1802 m 4727 2402 l  gs col-1 s gr 
% Polyline
n 4200 2100 m 5250 2100 l  gs col-1 s gr 
% Polyline
n 4200 2400 m 4427 2402 l  5027 1802 l  5250 1800 l  gs col-1 s gr 
n 4319.73 2431.06 m 4200.00 2400.00 l 4320.26 2371.06 l gs col-1 s gr
n 5129.74 1771.08 m 5250.00 1800.00 l 5130.27 1831.07 l gs col-1 s gr
% Polyline
n 5027 2027 m 5027 2177 l  gs col-1 s gr 
% Open spline
n 4275.00 1875.00 m 4162.50 1837.50 l
	4162.50 1837.50 4050.00 1800.00 3975.00 1800.00 DrawSplineSection
	3975.00 1800.00 3900.00 1800.00 3787.50 1800.00 DrawSplineSection
	3787.50 1800.00 3675.00 1800.00 3562.50 1837.50 DrawSplineSection
	3562.50 1837.50 3450.00 1875.00 3337.50 1912.50 DrawSplineSection
	3337.50 1912.50 3225.00 1950.00 3187.50 1987.50 DrawSplineSection
	3150.00 2025.00 l  gs col-1 s gr

n 3256.07 1961.36 m 3150.00 2025.00 l 3213.64 1918.93 l gs col-1 s gr
/Times-Roman findfont 180.00 scalefont setfont
975 2400 m
gs 1 -1 sc (1) col-1 show gr
/Times-Roman findfont 180.00 scalefont setfont
2775 2400 m
gs 1 -1 sc (2) col-1 show gr
/Times-Roman findfont 180.00 scalefont setfont
1875 1125 m
gs 1 -1 sc (4) col-1 show gr
/Times-Roman findfont 180.00 scalefont setfont
1425 1725 m
gs 1 -1 sc (\(1\)) col-1 show gr
/Times-Roman findfont 180.00 scalefont setfont
3000 1800 m
gs 1 -1 sc (\(3\)) col-1 show gr
/Times-Roman findfont 180.00 scalefont setfont
2250 1950 m
gs 1 -1 sc (\(2\)) col-1 show gr
/Times-Roman findfont 180.00 scalefont setfont
3750 2400 m
gs 1 -1 sc (3) col-1 show gr
/Times-Roman findfont 180.00 scalefont setfont
2175 600 m
gs 1 -1 sc (50kip) col-1 show gr
/Times-Roman findfont 180.00 scalefont setfont
3000 1125 m
gs 1 -1 sc (100kip) col-1 show gr
/Times-Roman findfont 150.00 scalefont setfont
675 1800 m
gs 1 -1 sc (8') col-1 show gr
/Times-Roman findfont 150.00 scalefont setfont
1650 2925 m
gs 1 -1 sc (6') col-1 show gr
/Times-Roman findfont 150.00 scalefont setfont
2550 2925 m
gs 1 -1 sc (6') col-1 show gr
/Times-Roman findfont 150.00 scalefont setfont
3225 2925 m
gs 1 -1 sc (2') col-1 show gr
/Symbol findfont 180.00 scalefont setfont
5176 2326 m
gs 1 -1 sc (= .003) col-1 show gr
/Times-Roman findfont 180.00 scalefont setfont
5326 1801 m
gs 1 -1 sc (E) col-1 show gr
/Symbol findfont 180.00 scalefont setfont
4577 1802 m
gs 1 -1 sc (s) col-1 show gr
/Symbol findfont 180.00 scalefont setfont
5325 2100 m
gs 1 -1 sc (e) col-1 show gr
/Times-Roman findfont 180.00 scalefont setfont
4200 675 m
gs 1 -1 sc (E = 3000) col-1 show gr
/Times-Roman findfont 180.00 scalefont setfont
4950 675 m
gs 1 -1 sc (ksi) col-1 show gr
$F2psEnd
restore
