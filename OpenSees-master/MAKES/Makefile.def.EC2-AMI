############################################################################
#
#  Program:  OpenSees
#
#  Purpose:  A Top-level Makefile to create the libraries needed
#	     to use the OpenSees framework. Works on Linux version 6.1
#            and below.
#
#  Written: fmk 
#  Created: 10/99
#
#  Send bug reports, comments or suggestions to fmckenna@ce.berkeley.edu
#
############################################################################

#
# https://help.ubuntu.com/community/EC2StartersGuide
# chmod 'go+rwx' XXX.pem
# ssh -i XXX.pem ec2_user@YYY.amazonaws.com
#

# Instructuction for building OpenSees on Amazon 64 bit AMI
# (instance ami-05355a6c) at time of writing this

# sudo yum list	available | grep gcc tcl
# sudo yum install gcc46.x86_64
# sudo yum install gcc-c++.x86_64
# sudo yum install gcc-gfortran.x86_64
# sudo yum install tcl.x86_64
# sudo yum install tcl-devel.x86_64
# sudo yum install svn
# sudo yum install emacs
# svn co svn://opensees.berkeley.edu/usr/local/svn/OpenSees/trunk OpenSees
# sudo in and type the following:
# mkdir lib
# mkdir bin
# cd OpenSees
# cp ./MAKES/Makefile.def.EC2-AMI ./Makefile.def
# make


# NOTE CHANGES:
# if compilation fails because tcl lib not present


# %---------------------------------%
# |  SECTION 1: PROGRAM             |
# %---------------------------------%
#
# Specify the location and name of the OpenSees interpreter program
# that will be created (if this all works!)


PROGRAMMING_MODE = SEQUENTIAL
#PROGRAMMING_MODE = PARALLEL
#PROGRAMMING_MODE = PARALLEL_INTERPRETERS

OpenSees_PROGRAM = $(HOME)/bin/OpenSees
PROGRAMMING_FLAG = 

ifeq ($(PROGRAMMING_MODE), PARALLEL)
OpenSees_PROGRAM = $(HOME)/bin/OpenSeesSP
PROGRAMMING_FLAG = -D_PARALLEL_PROCESSING
endif
ifeq ($(PROGRAMMING_MODE), PARALLEL_INTERPRETERS)
OpenSees_PROGRAM = $(HOME)/bin/OpenSeesMP
PROGRAMMING_FLAG = -D_PARALLEL_INTERPRETERS
endif

OPERATING_SYSTEM = LINUX
GRAPHICS = NONE
GRAPHIC_FLAG = -D_NOGRAPHICS
DEBUG_MODE = NO_DEBUG
RELIABILITY = NO_RELIABILITY


# %---------------------------------%
# |  SECTION 2: PATHS               |
# %---------------------------------%
#
# Note: if vendor supplied BLAS and LAPACK libraries or if you have
# any of the libraries already leave the directory location blank AND
# remove the directory from DIRS.

BASE		= /usr/local
FE		= $(HOME)/OpenSees/SRC

AMDdir       = $(HOME)/OpenSees/OTHER/AMD
BLASdir      = $(HOME)/OpenSees/OTHER/BLAS
CBLASdir     = $(HOME)/OpenSees/OTHER/CBLAS
LAPACKdir    = $(HOME)/OpenSees/OTHER/LAPACK
SUPERLU_DISTdir   = $(HOME)/OpenSees/OTHER/SuperLU_DIST_4.3/SRC
SUPERLUdir   = $(HOME)/OpenSees/OTHER/SuperLU_5.1.1/SRC
ARPACKdir    = $(HOME)/OpenSees/OTHER/ARPACK
UMFPACKdir   = $(HOME)/OpenSees/OTHER/UMFPACK
METISdir       = $(HOME)/OpenSees/OTHER/METIS
CSPARSEdir       = $(HOME)/OpenSees/OTHER/CSPARSE
SRCdir       = $(HOME)/OpenSees/SRC


DIRS        = $(BLASdir) $(CBLASdir) $(LAPACKdir) $(AMDdir) $(CSPARSEdir) \
	$(SUPERLUdir) $(SUPERLU_DISTdir) $(ARPACKdir) $(UMFPACKdir) $(SRCdir) $(METISdir)

# %-------------------------------------------------------%
# | SECTION 3: LIBRARIES                                  |
# |                                                       |
# | The following section defines the libraries that will |
# | be created and/or linked with when the libraries are  | 
# | being created or linked with.                         |
# %-------------------------------------------------------%
#
# Note: if vendor supplied BLAS and LAPACK libraries leave the
# libraries blank. You have to get your own copy of the tcl/tk 
# library!! 
#
# Note: For libraries that will be created (any in DIRS above)
# make sure the directory exsists where you want the library to go!

FE_LIBRARY      = $(HOME)/lib/libOpenSees.a
NDARRAY_LIBRARY = $(HOME)/lib/libndarray.a # BJ_UCD jeremic@ucdavis.edu
MATMOD_LIBRARY  = $(HOME)/lib/libmatmod.a  # BJ_UCD jeremic@ucdavis.edu
BJMISC_LIBRARY  = $(HOME)/lib/libBJmisc.a  # BJ_UCD jeremic@ucdavis.edu
LAPACK_LIBRARY  = $(HOME)/lib/libLapack.a
BLAS_LIBRARY    = $(HOME)/lib/libBlas.a
SUPERLU_LIBRARY = $(HOME)/lib/libsuperLU.a
CBLAS_LIBRARY   = $(HOME)/lib/libCBlas.a
ARPACK_LIBRARY  = $(HOME)/lib/libArpack.a
AMD_LIBRARY  = $(HOME)/lib/libAMD.a
UMFPACK_LIBRARY = $(HOME)/lib/libUmfpack.a
METIS_LIBRARY   = $(HOME)/lib/libMetis.a
CSPARSE_LIBRARY   = $(HOME)/lib/libCSparse.a
TCL_LIBRARY = /usr/local/lib64/libtcl8.5.so
BLITZ_LIBRARY = $(HOME)/blitz/lib/libblitz.a
GRAPHIC_LIBRARY     = 
DISTRIBUTED_SUPERLU_LIBRARY     = $(HOME)/lib/libDistributedSuperLU.a

ifeq ($(PROGRAMMING_MODE), SEQUENTIAL)
DISTRIBUTED_SUPERLU_LIBRARY     = 
endif

# WATCH OUT .. These libraries are removed when 'make wipe' is invoked.
WIPE_LIBS	= $(FE_LIBRARY) \
		$(LAPACK_LIBRARY) \
		$(BLAS_LIBRARY) \
		$(CBLAS_LIBRARY) \
		$(SUPERLU_LIBRARY) \
		$(ARPACK_LIBRARY) \
		$(UMFPACK_LIBRARY) \
		$(CSPARSE_LIBRARY) \
		$(DISTRIBUTED_SUPERLU_LIBRARY) \
	        $(METIS_LIBRARY)

# %---------------------------------------------------------%
# | SECTION 4: COMPILERS                                    |
# |                                                         |
# | The following macros specify compilers, linker/loaders, |
# | the archiver, and their options.  You need to make sure |
# | these are correct for your system.                      |
# %---------------------------------------------------------%

# Compilers
ifeq ($(PROGRAMMING_MODE), SEQUENTIAL)

CC++	= /usr/bin/g++
CC      = /usr/bin/gcc
FC	= /usr/bin/gfortran

else

CC++ =/usr/bin/mpic++
CC = /usr/bin/mpicc
FC = /usr/bin/mpif90

endif

C++FLAGS         = -Wall -D_LINUX -D_UNIX  -D_TCL85  \
	$(GRAPHIC_FLAG) $(RELIABILITY_FLAG) $(DEBUG_FLAG) \
	$(PROGRAMMING_FLAG) -O3 -ffloat-store 

CFLAGS          = -Wall -O2
FFLAGS          = -Wall -O

# Linker
LINKER          = $(CC++)
LINKFLAGS       = -rdynamic -Wl

AR		= ar 
ARFLAGS		= cqls
RANLIB		= ranlib
RANLIBFLAGS     =


# Misc
MAKE		= make
CD              = cd
ECHO            = echo
RM              = rm
RMFLAGS         = -f
SHELL           = /bin/sh

# %---------------------------------------------------------%
# | SECTION 5: COMPILATION                                  |
# |                                                         |
# | The following macros specify the macros used in         |
# | to compile the source code into object code.            |
# %---------------------------------------------------------%

.SUFFIXES:
.SUFFIXES:	.C .c .f .f90 .cpp .o .cpp

#
# %------------------%
# | Default command. |
# %------------------%
#
.DEFAULT:
	@$(ECHO) "Unknown target $@, try:  make help"
#
# %-------------------------------------------%
# |  Command to build .o files from .f files. |
# %-------------------------------------------%
#

.cpp.o:
	@$(ECHO) Making $@ from $<
	$(CC++) $(C++FLAGS) $(INCLUDES) -c $< -o $@

.C.o:
	@$(ECHO) Making $@ from $<
	$(CC++) $(C++FLAGS) $(INCLUDES) -c $< -o $@
.c.o:
	@$(ECHO) Making $@ from $<
	$(CC) $(CFLAGS) -c $< -o $@
.f.o:      
	@$(ECHO) Making $@ from $<
	$(FC) $(FFLAGS) -c $< -o $@

# %---------------------------------------------------------%
# | SECTION 6: OTHER LIBRARIES                              |
# |                                                         |
# | The following macros specify other libraries that must  |
# | be linked with when creating executables. These are     |
# | platform specific and typically order does matter!!     |
# %---------------------------------------------------------%
MACHINE_LINKLIBS  = -L$(BASE)/lib \
		-L$(HOME)/lib 

MACHINE_NUMERICAL_LIBS  = -lm \
		$(ARPACK_LIBRARY) \
		$(SUPERLU_LIBRARY) \
		$(UMFPACK_LIBRARY) $(CSPARSE_LIBRARY) \
	        $(LAPACK_LIBRARY) $(BLAS_LIBRARY) $(CBLAS_LIBRARY) \
		$(AMD_LIBRARY) $(GRAPHIC_LIBRARY)\
		-ldl -lgfortran 

HAVEMUMPS = NO



ifeq ($(PROGRAMMMING_MODE), SEQUENTIAL)
HAVEMUMPS = NO
MUMPS_INCLUDE = .
MUMPS_LIB = 
MUMPS_DIR = 
MUMPS_FLAG = 
endif

ifeq ($(HAVEMUMPS), YES)

MUMPS = YES
MUMPS_FLAG = -D_MUMPS
MUMPS_DIR = $(HOME)/PARALLEL_NUMERICAL_LIBS/MUMPS

BLACS_DIR = $(HOME)/PARALLEL_NUMERICAL_LIBS/BLAC
SCALAPACK_DIR = $(HOME)/PARALLEL_NUMERICAL_LIBS/SCALAPACK
LAPACK_DIR = $(HOME)/PARALLEL_NUMERICAL_LIBS/LAPACK

BLACS_LIB = -L$(BLACS_DIR)/LIB -lblacs_MPI-LINUX-0
SCALAPACK_LIB = -L$(SCALAPACK_DIR) -lscalapack
BLACS_LIB = -L$(BLACS_DIR)/INCLUDE
SCALAPACK_LIB = -L$(SCALAPACK_DIR) 

PLAT    = LINUX

SCALAP  = $(BLACS_LIB) $(SCALAPACK_LIB)

MUMPS_LIB = -L$(MUMPS_DIR)/lib \
	$(FE)/system_of_eqn/linearSOE/mumps/MumpsSOE.o \
	$(FE)/system_of_eqn/linearSOE/mumps/MumpsSolver.o \
	$(FE)/system_of_eqn/linearSOE/mumps/MumpsParallelSOE.o \
	$(FE)/system_of_eqn/linearSOE/mumps/MumpsParallelSolver.o \
        $(HOME)/lib/libdmumpsLINUX.a \
        $(HOME)/lib/libmumps_commonLINUX.a \
        $(HOME)/lib/libpordLINUX.a \
        $(HOME)/lib/libscalapack.a \
	$(HOME)/lib/blacs_MPI-LINUX-0.a \
	$(HOME)/lib/blacsCinit_MPI-LINUX-0.a \
	$(HOME)/lib/blacsF77init_MPI-LINUX-0.a \
	$(HOME)/PARALLEL_NUMERICAL_LIBS/BLACS/SRC/MPI/INTERNAL/bi_f77_get_constants.o \
        $(HOME)/lib/blas_LINUX.a


ALPHA_ =	-ldmumps$(PLAT) -lmumps_common$(PLAT)\
	-lpord$(PLAT) \
	 $(SCALAP) \
	 $(HOME)/PARALLEL_NUMERICAL_LIBS/SCALAPACK/libscalapack.a \
	 $(HOME)/PARALLEL_NUMERICAL_LIBS/BLACS/LIB/blacs_MPI-LINUX-0.a \
	 $(HOME)/PARALLEL_NUMERICAL_LIBS/BLACS/LIB/blacsCinit_MPI-LINUX-0.a \
	 $(HOME)/PARALLEL_NUMERICAL_LIBS/BLACS/LIB/blacsF77init_MPI-LINUX-0.a \
	 $(HOME)/PARALLEL_NUMERICAL_LIBS/SCALAPACK/libscalapack.a \
	 $(HOME)/PARALLEL_NUMERICAL_LIBS/BLACS/LIB/blacs_MPI-LINUX-0.a \
         $(HOME)/PARALLEL_NUMERICAL_LIBS/BLAS/blas_LINUX.a

MUMPS_INCLUDE = $(MUMPS_DIR)/include

endif

PARALLEL_LIB = 

ifeq ($(PROGRAMMING_MODE), PARALLEL_INTERPRETERS)
PARALLEL_LIB = \
	$(FE)/system_of_eqn/linearSOE/sparseGEN/DistributedSparseGenColLinSOE.o \
        $(FE)/system_of_eqn/linearSOE/sparseGEN/DistributedSuperLU.o \
	$(DISTRIBUTED_SUPERLU_LIBRARY) $(METIS_LIBRARY) $(MUMPS_LIB) -lmpif77
endif

ifeq ($(PROGRAMMING_MODE), PARALLEL)
PARALLEL_LIB = \
	$(FE)/system_of_eqn/linearSOE/sparseGEN/DistributedSparseGenColLinSOE.o \
        $(FE)/system_of_eqn/linearSOE/sparseGEN/DistributedSuperLU.o \
	$(DISTRIBUTED_SUPERLU_LIBRARY) $(METIS_LIBRARY) $(MUMPS_LIB) -lmpif77
endif



MACHINE_SPECIFIC_LIBS = 



# %---------------------------------------------------------%
# | SECTION 7: INCLUDE FILES                                |
# |                                                         |
# | The following macros specify include files needed for   |
# | compilation.                                            |
# %---------------------------------------------------------%
MACHINE_INCLUDES        = -I/usr/include \
			  -I$(BASE)/include \
			  -I/usr/include/cxx \
			  -I$(HOME)/include -I$(HOME)/blitz -I$(SUPERLU_DISTdir)

# this file contains all the OpenSees/SRC includes
include $(FE)/Makefile.incl

#TCL_INCLUDES = -I/usr/includes/tcl-private/generic
TCL_INCLUDES = -I/usr/include/tcl8.5

INCLUDES = $(TCL_INCLUDES) $(FE_INCLUDES) $(MACHINE_INCLUDES)








