############################################################################
#
#  Program:  OpenSees
#
#  Purpose:  A Top-level Makefile to create the libraries needed
#	     to use the OpenSees framework. Works on Linux version 6.1
#            and below.
#
#  Written: fmk 
#  Created: 10/99
#
#  Send bug reports, comments or suggestions to fmckenna@ce.berkeley.edu
#
############################################################################

# install OpenSees and TCL & build in usual way
# for paralle get the scalapack_installer and run the following

./setup.py --prefix=/home/ubuntu --downall --mpiincdir=/usr/include/mpich2/mpi.h 

#the opbatin MUMPS and build

DAMAGE2P_FLAG = -D_HAVE_Damage2p
PLAINCONCRETE_FLAG = -D_HAVE_PSUMAT

# %---------------------------------%
# |  SECTION 1: PROGRAM             |
# %---------------------------------%
#
# Specify the location and name of the OpenSees interpreter program
# that will be created (if this all works!)

OpenSees_PROGRAM = $(HOME)/bin/OpenSees

OPERATING_SYSTEM = LINUX
GRAPHICS = NONE
GRAPHIC_FLAG = -D_NOGRAPHICS
PROGRAMMING_MODE = SEQUENTIAL
DEBUG_MODE = NO_DEBUG
RELIABILITY = NO_RELIABILITY

#PROGRAMMING_MODE = SEQUENTIAL
#PROGRAMMING_MODE = PARALLEL
PROGRAMMING_MODE = PARALLEL_INTERPRETERS

HAVEMUMPS = NO
MUMPS_FLAG = 
MUMPS_INCLUDE =
MUMPS_LIB = 



ifeq ($(PROGRAMMING_MODE), PARALLEL)
OpenSees_PROGRAM = $(HOME)/bin/OpenSeesSP
PROGRAMMING_FLAG = -D_PARALLEL_PROCESSING
HAVEMUMPS = YES
MUMPS_FLAG = -D_MUMPS -D_OPENMPI
endif

ifeq ($(PROGRAMMING_MODE), PARALLEL_INTERPRETERS)
OpenSees_PROGRAM = $(HOME)/bin/OpenSeesMP
PROGRAMMING_FLAG = -D_PARALLEL_INTERPRETERS
HAVEMUMPS = YES
MUMPS_FLAG = -D_MUMPS -D_OPENMPI
endif


# %---------------------------------%
# |  SECTION 2: PATHS               |
# %---------------------------------%
#
# Note: if vendor supplied BLAS and LAPACK libraries or if you have
# any of the libraries already leave the directory location blank AND
# remove the directory from DIRS.

BASE		= /usr/local
FE		= $(HOME)/OpenSees/SRC

AMDdir       = $(HOME)/OpenSees/OTHER/AMD
BLASdir      = $(HOME)/OpenSees/OTHER/BLAS
CBLASdir     = $(HOME)/OpenSees/OTHER/CBLAS
LAPACKdir    = $(HOME)/OpenSees/OTHER/LAPACK
SUPERLUdir   = $(HOME)/OpenSees/OTHER/SuperLU_5.1.1/SRC
SUPERLU_DISTdir   = $(HOME)/OpenSees/OTHER/SuperLU_DIST_4.3/SRC
ARPACKdir    = $(HOME)/OpenSees/OTHER/ARPACK
UMFPACKdir   = $(HOME)/OpenSees/OTHER/UMFPACK
METISdir     = $(HOME)/OpenSees/OTHER/METIS
CSPARSEdir   = $(HOME)/OpenSees/OTHER/CSPARSE
SRCdir       = $(HOME)/OpenSees/SRC


DIRS        = $(BLASdir) $(CBLASdir) $(LAPACKdir) $(AMDdir) $(CSPARSEdir) \
	$(SUPERLUdir) $(ARPACKdir) $(UMFPACKdir) $(SRCdir) $(METISdir)

# %-------------------------------------------------------%
# | SECTION 3: LIBRARIES                                  |
# |                                                       |
# | The following section defines the libraries that will |
# | be created and/or linked with when the libraries are  | 
# | being created or linked with.                         |
# %-------------------------------------------------------%
#
# Note: if vendor supplied BLAS and LAPACK libraries leave the
# libraries blank. You have to get your own copy of the tcl/tk 
# library!! 
#
# Note: For libraries that will be created (any in DIRS above)
# make sure the directory exsists where you want the library to go!

FE_LIBRARY      = $(HOME)/lib/libOpenSees.a
LAPACK_LIBRARY  = $(HOME)/lib/libLapack.a
BLAS_LIBRARY    = $(HOME)/lib/libBlas.a
SUPERLU_LIBRARY = $(HOME)/lib/libSuperLU.a
CBLAS_LIBRARY   = $(HOME)/lib/libCBlas.
CSPARSE_LIBRARY   = $(HOME)/lib/libCSparse.a
ITPACK_LIBRARY   = $(HOME)/lib/libItpack.a
ARPACK_LIBRARY  = $(HOME)/lib/libArpack.a
AMD_LIBRARY  = $(HOME)/lib/libAMD.a
UMFPACK_LIBRARY = $(HOME)/lib/libUmfpack.a
METIS_LIBRARY   = $(HOME)/lib/libMetis.a
TCL_LIBRARY = /usr/lib/libtcl8.5.so
BLITZ_LIBRARY = $(HOME)/blitz/lib/libblitz.a
GRAPHIC_LIBRARY     = 

ifeq ($(PROGRAMMING_MODE), SEQUENTIAL)
DISTRIBUTED_SUPERLU_LIBRARY     = 
else
DISTRIBUTED_SUPERLU_LIBRARY     = $(HOME)/lib/libSuperLU_DIST.a
endif

# WATCH OUT .. These libraries are removed when 'make wipe' is invoked.
WIPE_LIBS	= $(FE_LIBRARY) \
		$(LAPACK_LIBRARY) \
		$(BLAS_LIBRARY) \
		$(CBLAS_LIBRARY) \
		$(SUPERLU_LIBRARY) \
		$(ARPACK_LIBRARY) \
		$(UMFPACK_LIBRARY) \
	        $(METIS_LIBRARY)

# %---------------------------------------------------------%
# | SECTION 4: COMPILERS                                    |
# |                                                         |
# | The following macros specify compilers, linker/loaders, |
# | the archiver, and their options.  You need to make sure |
# | these are correct for your system.                      |
# %---------------------------------------------------------%

# Compilers

ifeq ($(PROGRAMMING_MODE), SEQUENTIAL)

CC++	= g++
CC      = gcc
FC	= gfortran

else

CC++            =  mpicxx
CC              =  mpicc
FC              =  mpif90
F90             =  mpif90
FORTRAN             =  $(FC)

endif

LINKER          =  $(CC++)


AR		= ar 
ARFLAGS		= cqls
RANLIB		= ranlib
RANLIBFLAGS     =

# Compiler Flags
#
# NOTES:
#    C++ FLAGS TAKE need _UNIX or _WIN32 for preprocessor dircetives
#         - the _WIN32 for the Windows95/98 or NT operating system.
#    C FLAGS used -DUSE_VENDOR_BLAS (needed in SuperLU) if UNIX in C++ FLAGS
#

# modified as optimizaton currently causing problems with Steeln01 code
ifeq ($(DEBUG_MODE), DEBUG)

C++FLAGS         = -Wall -D_LINUX -D_UNIX -D_TCL85   \
		$(GRAPHIC_FLAG) $(RELIABILITY_FLAG) $(DEBUG_FLAG) $(PROGRAMMING_FLAG) \
			         -g -pg 
	      

CFLAGS          = -Wall -pg $(GRAPHIC_FLAG) $(RELIABILITY_FLAG) $(DEBUG_FLAG) $(PROGRAMMING_FLAG) 
FFLAGS          = -Wall 

# Linker
LINKER          = $(CC++)
LINKFLAGS       = -g -pg

else

C++FLAGS         = -Wall -D_LINUX -D_UNIX  -D_TCL85  \
	$(GRAPHIC_FLAG) $(RELIABILITY_FLAG) $(DEBUG_FLAG) \
	$(PROGRAMMING_FLAG) $(MUMPS_FLAG) $(DAMAGE2P_FLAG) $(PLAINCONCRETE_FLAG) \
	-O3 -ffloat-store 
CFLAGS          = -Wall -O2 
FFLAGS          = -Wall -O

# Linker
LINKER          = $(CC++)
LINKFLAGS       = -rdynamic 

endif


# Misc
MAKE		= make
CD              = cd
ECHO            = echo
RM              = rm
RMFLAGS         = -f
SHELL           = /bin/sh

# %---------------------------------------------------------%
# | SECTION 5: COMPILATION                                  |
# |                                                         |
# | The following macros specify the macros used in         |
# | to compile the source code into object code.            |
# %---------------------------------------------------------%

.SUFFIXES:
.SUFFIXES:	.C .c .f .f90 .cpp .o .cpp

#
# %------------------%
# | Default command. |
# %------------------%
#
.DEFAULT:
	@$(ECHO) "Unknown target $@, try:  make help"
#
# %-------------------------------------------%
# |  Command to build .o files from .f files. |
# %-------------------------------------------%
#

.cpp.o:
	@$(ECHO) Making $@ from $<
	$(CC++) $(C++FLAGS) $(INCLUDES) -c $< -o $@

.C.o:
	@$(ECHO) Making $@ from $<
	$(CC++) $(C++FLAGS) $(INCLUDES) -c $< -o $@
.c.o:
	@$(ECHO) Making $@ from $<
	$(CC) $(CFLAGS) -c $< -o $@
.f.o:      
	@$(ECHO) Making $@ from $<
	$(FC) $(FFLAGS) -c $< -o $@
.f90.o:      
	@$(ECHO) Making $@ from $<
	$(FC) $(FFLAGS) -c $< -o $@

# %---------------------------------------------------------%
# | SECTION 6: OTHER LIBRARIES                              |
# |                                                         |
# | The following macros specify other libraries that must  |
# | be linked with when creating executables. These are     |
# | platform specific and typically order does matter!!     |
# %---------------------------------------------------------%


ifeq ($(HAVEMUMPS), YES)

MUMPS = YES
MUMPS_FLAG = -D_MUMPS -D_OPENMPI
MUMPS_DIR = $(HOME)/MUMPS_5.0.0

PLAT    = MPICHGM-INTEL80

SCALAP  = $(BLACSlib) $(SCALAPlib) $(BLACSlib)

BLACS_DIR = $(HOME)/PARALLEL_NUMERICAL_LIBS/BLAC
SCALAPACK_DIR = $(HOME)/PARALLEL_NUMERICAL_LIBS/SCALAPACK
LAPACK_DIR = $(HOME)/PARALLEL_NUMERICAL_LIBS/LAPACK

BLACS_LIB = -L$(BLACS_DIR)/LIB -lblacs_MPI-LINUX-0
SCALAPACK_LIB = -L$(SCALAPACK_DIR) -lscalapack
BLACS_LIB = -L$(BLACS_DIR)/INCLUDE
SCALAPACK_LIB = -L$(SCALAPACK_DIR) 

PLAT    = LINUX

SCALAP  = $(BLACS_LIB) $(SCALAPACK_LIB)

MUMPS_LIB = -L$(MUMPS_DIR)/lib \
	$(FE)/system_of_eqn/linearSOE/mumps/MumpsSOE.o \
	$(FE)/system_of_eqn/linearSOE/mumps/MumpsSolver.o \
	$(FE)/system_of_eqn/linearSOE/mumps/MumpsParallelSOE.o \
	$(FE)/system_of_eqn/linearSOE/mumps/MumpsParallelSolver.o \
        $(HOME)/lib/libdmumps.a \
	-L/home/fmk/scalapack/lib -lscalapack -lreflapack -lrefblas -ltmg \
        $(HOME)/lib/libmumps_common.a \
        $(HOME)/lib/libpord.a \


MUMPS_INCLUDE = -I$(MUMPS_DIR)/include

endif


MACHINE_LINKLIBS  = -L$(BASE)/lib \
		-L$(HOME)/lib 

MACHINE_NUMERICAL_LIBS  = -lm \
		$(ARPACK_LIBRARY) \
		$(SUPERLU_LIBRARY) \
		$(UMFPACK_LIBRARY) \
	        $(CBLAS_LIBRARY) $(CSPARSE_LIBRARY) \
		$(AMD_LIBRARY) $(GRAPHIC_LIBRARY)\
		-ldl -lgfortran 

ifeq ($(PROGRAMMING_MODE), SEQUENTIAL)

PARALLEL_LIB = 

MACHINE_SPECIFIC_LIBS = $(LAPACK_LIBRARY) $(BLAS_LIBRARY)
PARALLEL_INCLUDES =


endif

ifeq ($(PROGRAMMING_MODE), PARALLEL)

PARALLEL_LIB = 	$(DISTRIBUTED_SUPERLU_LIBRARY) \
$(FE)/system_of_eqn/linearSOE/sparseGEN/DistributedSparseGenColLinSOE.o \
	$(FE)/system_of_eqn/linearSOE/sparseGEN/SparseGenColLinSolver.o \
	$(FE)/system_of_eqn/linearSOE/sparseGEN/DistributedSuperLU.o \
	$(DISTRIBUTED_SUPERLU_LIBRARY) \
	$(METIS_LIBRARY) $(HOME)/OpenSees/OTHER/METIS/frename.o $(METIS_LIBRARY) $(MUMPS_LIB) \
	-lmpi -lmpi_f77

PARALLEL_INCLUDES = -I$(SUPERLU_DISTdir) \
		  $(MUMPS_INCLUDE)


MACHINE_SPECIFIC_LIBS = 

endif

ifeq ($(PROGRAMMING_MODE), PARALLEL_INTERPRETERS)

PARALLEL_LIB = $(FE)/system_of_eqn/linearSOE/sparseGEN/DistributedSparseGenColLinSOE.o \
	$(FE)/system_of_eqn/linearSOE/sparseGEN/DistributedSuperLU.o \
	$(DISTRIBUTED_SUPERLU_LIBRARY) \
	$(METIS_LIBRARY) $(HOME)/OpenSees/OTHER/METIS/frename.o $(METIS_LIBRARY) $(MUMPS_LIB) -lmpi -lmpi_f77

PARALLEL_INCLUDES = -I$(SUPERLU_DISTdir) \
		  $(MUMPS_INCLUDE)

MACHINE_SPECIFIC_LIBS = 

endif


MACHINE_INCLUDES        = -I/usr/include \
			  -I$(BASE)/include \
			  -I/usr/include/cxx \
			  -I$(HOME)/include -I$(HOME)/blitz


# this file contains all the OpenSees/SRC includes
include $(FE)/Makefile.incl

TCL_INCLUDES = -I/usr/include/tcl8.5

INCLUDES = $(TCL_INCLUDES) $(FE_INCLUDES) $(MACHINE_INCLUDES) $(PARALLEL_INCLUDES)








